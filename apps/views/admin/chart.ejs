<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Th·ªëng k√™ ti·∫øn tr√¨nh h·ªçc c·ªßa h·ªçc sinh</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            padding-top: 20px;
            padding-bottom: 20px;
        }

        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .no-data {
            text-align: center;
            color: #6c757d;
            padding: 20px;
        }

        .table-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>üìä Th·ªëng k√™ ti·∫øn tr√¨nh h·ªçc c·ªßa h·ªçc sinh</h2>
            <button id="reload-btn" class="btn btn-primary">T·∫£i l·∫°i</button>
        </div>

        <div id="spinner" class="spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">ƒêang t·∫£i...</span>
            </div>
        </div>

        <!-- B·ªô l·ªçc -->
        <div class="mb-4">
            <div class="row">
                <div class="col-md-4">
                    <label for="userFilter" class="form-label">L·ªçc theo h·ªçc sinh:</label>
                    <select id="userFilter" class="form-select">
                        <option value="all">T·∫•t c·∫£ h·ªçc sinh</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="timeFilter" class="form-label">L·ªçc theo th·ªùi gian:</label>
                    <select id="timeFilter" class="form-select">
                        <option value="all">T·∫•t c·∫£ th·ªùi gian</option>
                        <option value="7">7 ng√†y qua</option>
                        <option value="30">30 ng√†y qua</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Bi·ªÉu ƒë·ªì c·ªôt: ƒêi·ªÉm kinh nghi·ªám -->
            <div class="col-md-6 chart-container">
                <h5 class="text-center">ƒêi·ªÉm kinh nghi·ªám c·ªßa h·ªçc sinh</h5>
                <canvas id="xpChart"></canvas>
            </div>

            <!-- Bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá Gates ƒë√£ m·ªü -->
            <div class="col-md-6 chart-container">
                <h5 class="text-center">T·ª∑ l·ªá Gates ƒë√£ m·ªü</h5>
                <canvas id="gatesChart"></canvas>
            </div>

            <!-- Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng: Ti·∫øn tr√¨nh Stages theo th·ªùi gian -->
            <div class="col-md-12 chart-container">
                <h5 class="text-center">Ti·∫øn tr√¨nh m·ªü Stages theo th·ªùi gian</h5>
                <canvas id="stagesChart"></canvas>
            </div>

            <!-- B·∫£ng x·∫øp h·∫°ng -->
            <div class="col-md-6 table-container">
                <h5 class="text-center">B·∫£ng x·∫øp h·∫°ng h·ªçc sinh</h5>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>X·∫øp h·∫°ng</th>
                            <th>T√™n h·ªçc sinh</th>
                            <th>ƒêi·ªÉm kinh nghi·ªám</th>
                        </tr>
                    </thead>
                    <tbody id="leaderboard"></tbody>
                </table>
            </div>

            <!-- B·∫£ng chi ti·∫øt -->
            <div class="col-md-6 table-container">
                <h5 class="text-center">Chi ti·∫øt ti·∫øn tr√¨nh</h5>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>T√™n h·ªçc sinh</th>
                            <th>H√†nh tr√¨nh</th>
                            <th>Gates ƒë√£ m·ªü</th>
                            <th>Stages ƒë√£ m·ªü</th>
                            <th>Ng√†y t·∫°o</th>
                        </tr>
                    </thead>
                    <tbody id="details"></tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let allData = []; // L∆∞u tr·ªØ to√†n b·ªô d·ªØ li·ªáu t·ª´ API
        let charts = {}; // L∆∞u tr·ªØ c√°c ƒë·ªëi t∆∞·ª£ng Chart.js ƒë·ªÉ c·∫≠p nh·∫≠t

        async function fetchAllProgress() {
            const spinner = document.getElementById('spinner');
            spinner.style.display = 'block';

            try {
                const res = await fetch('/admin/userprogress/all');
                const data = await res.json();

                if (!data.success) throw new Error('L·ªói t·ª´ server: ' + (data.message || 'Kh√¥ng x√°c ƒë·ªãnh'));

                spinner.style.display = 'none';

                if (data.data.length === 0) {
                    document.querySelector('.row').innerHTML = '<p class="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.</p>';
                    return;
                }

                allData = data.data;

                // ƒêi·ªÅn danh s√°ch h·ªçc sinh v√†o dropdown
                const userFilter = document.getElementById('userFilter');
                userFilter.innerHTML = '<option value="all">T·∫•t c·∫£ h·ªçc sinh</option>';
                allData.forEach(progress => {
                    const option = document.createElement('option');
                    option.value = progress.username || 'Kh√¥ng x√°c ƒë·ªãnh';
                    option.textContent = progress.username || 'Kh√¥ng x√°c ƒë·ªãnh';
                    userFilter.appendChild(option);
                });

                // Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu
                updateChartsAndTables(allData);

            } catch (err) {
                spinner.style.display = 'none';
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', err);
                document.querySelector('.row').innerHTML = `<p class="no-data">L·ªói khi t·∫£i d·ªØ li·ªáu: ${err.message}</p>`;
            }
        }

        function updateChartsAndTables(data) {
            const usernames = data.map(progress => progress.username || 'Kh√¥ng x√°c ƒë·ªãnh');
            const xp = data.map(progress => progress.experiencePoints || 0);
            const gatesCount = data.map(progress => progress.unlockedGatesNames.length);
            const totalGates = gatesCount.reduce((a, b) => a + b, 0);
            const stagesOverTime = data.map(progress => ({
                date: new Date(progress.createdAt).toLocaleDateString('vi-VN'),
                stages: progress.unlockedStagesNames.length
            }));

            // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì c·ªôt: ƒêi·ªÉm kinh nghi·ªám
            if (charts.xpChart) charts.xpChart.destroy();
            charts.xpChart = new Chart(document.getElementById('xpChart'), {
                type: 'bar',
                data: {
                    labels: usernames,
                    datasets: [{
                        label: 'ƒêi·ªÉm kinh nghi·ªám',
                        data: xp,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'ƒêi·ªÉm' }
                        }
                    }
                }
            });

            // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá Gates ƒë√£ m·ªü
            if (charts.gatesChart) charts.gatesChart.destroy();
            charts.gatesChart = new Chart(document.getElementById('gatesChart'), {
                type: 'pie',
                data: {
                    labels: usernames,
                    datasets: [{
                        label: 'S·ªë Gates ƒë√£ m·ªü',
                        data: gatesCount,
                        backgroundColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'
                        ]
                    }]
                },
                options: {
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const value = context.raw;
                                    const percentage = ((value / totalGates) * 100).toFixed(2);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });

            // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì ƒë∆∞·ªùng: Ti·∫øn tr√¨nh Stages theo th·ªùi gian
            const dates = [...new Set(stagesOverTime.map(item => item.date))];
            const stagesData = dates.map(date => {
                return stagesOverTime.filter(item => item.date === date)
                    .reduce((sum, item) => sum + item.stages, 0);
            });

            if (charts.stagesChart) charts.stagesChart.destroy();
            charts.stagesChart = new Chart(document.getElementById('stagesChart'), {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'S·ªë Stages ƒë√£ m·ªü',
                        data: stagesData,
                        fill: false,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'S·ªë Stages' }
                        },
                        x: {
                            title: { display: true, text: 'Ng√†y' }
                        }
                    }
                }
            });

            // C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng
            const leaderboard = document.getElementById('leaderboard');
            leaderboard.innerHTML = '';
            const sortedData = [...data].sort((a, b) => (b.experiencePoints || 0) - (a.experiencePoints || 0));
            sortedData.slice(0, 5).forEach((progress, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${progress.username || 'Kh√¥ng x√°c ƒë·ªãnh'}</td>
                    <td>${progress.experiencePoints || 0}</td>
                `;
                leaderboard.appendChild(row);
            });

            // C·∫≠p nh·∫≠t b·∫£ng chi ti·∫øt
            const details = document.getElementById('details');
            details.innerHTML = '';
            data.forEach(progress => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${progress.username || 'Kh√¥ng x√°c ƒë·ªãnh'}</td>
                    <td>${progress.journeyName || 'H√†nh tr√¨nh kh√¥ng x√°c ƒë·ªãnh'}</td>
                    <td>${progress.unlockedGatesNames.length}</td>
                    <td>${progress.unlockedStagesNames.length}</td>
                    <td>${new Date(progress.createdAt).toLocaleDateString('vi-VN')}</td>
                `;
                details.appendChild(row);
            });
        }

        // L·ªçc d·ªØ li·ªáu theo ng∆∞·ªùi d√πng v√† th·ªùi gian
        function filterData() {
            const userFilter = document.getElementById('userFilter').value;
            const timeFilter = document.getElementById('timeFilter').value;
            let filteredData = [...allData];

            // L·ªçc theo ng∆∞·ªùi d√πng
            if (userFilter !== 'all') {
                filteredData = filteredData.filter(progress =>
                    (progress.username || 'Kh√¥ng x√°c ƒë·ªãnh') === userFilter
                );
            }

            // L·ªçc theo th·ªùi gian
            const now = new Date();
            if (timeFilter !== 'all') {
                const days = parseInt(timeFilter);
                const cutoffDate = new Date(now.setDate(now.getDate() - days));
                filteredData = filteredData.filter(progress =>
                    new Date(progress.createdAt) >= cutoffDate
                );
            }

            updateChartsAndTables(filteredData);
        }

        // T·∫£i d·ªØ li·ªáu khi trang load
        window.onload = fetchAllProgress;

        // Th√™m s·ª± ki·ªán cho n√∫t t·∫£i l·∫°i
        document.getElementById('reload-btn').addEventListener('click', fetchAllProgress);

        // Th√™m s·ª± ki·ªán cho b·ªô l·ªçc
        document.getElementById('userFilter').addEventListener('change', filterData);
        document.getElementById('timeFilter').addEventListener('change', filterData);
    </script>
</body>

</html>